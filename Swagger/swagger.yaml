swagger: '2.0'
info:
  description: This is the BikeRide Lagom microservices description
  version: 0.0.1-SNAPSHOT
  title: BikeRide Lagom
  termsOfService: 'https://github.com/fernandohackbart/bikeride-lagom/blob/master/LICENSE'
  contact:
    email: fhackbart@gmail.com
  license:
    name: Apache 2.0
    url: 'http://www.apache.org/licenses/LICENSE-2.0.html'
host: '192.168.1.200:8000'
basePath: /
tags:
  - name: "Authentication"
    description: "Operations over Authentication"
    externalDocs:
      description: ""
      url: "https://github.com/fernandohackbart/bikeride-lagom"
  - name: "Biker"
    description: "Operations over Biker"
    externalDocs:
      description: ""
      url: "https://github.com/fernandohackbart/bikeride-lagom"
  - name: "Track"
    description: "Operations over Track"
    externalDocs:
      description: ""
      url: "https://github.com/fernandohackbart/bikeride-lagom"
  - name: "Ride"
    description: "Operations over Ride"
    externalDocs:
      description: ""
      url: "https://github.com/fernandohackbart/bikeride-lagom"
paths:
  /api/authn/biker:
    post:
      tags:
      - "Authentication"
      summary: "Create a new biker in the application without authentication token"
      description: ""
      operationId: "createBikerOnAuth"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Biker fields"
        required: true
        schema:
          $ref: "#/definitions/BikerCreateRequest"
      responses:
        200:
          description: "Biker ID and authentication token"
          schema:
            $ref: "#/definitions/BikerToken"
  /api/authn/validate:
    post:
      tags:
      - "Authentication"
      summary: "Validate a given PIN and return a new token"
      description: ""
      operationId: "validatePIN"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Pin to be validated"
        required: true
        schema:
          $ref: "#/definitions/ValidatePINRequest"
      responses:
        200:
          description: "Biker ID and authentication token"
          schema:
            $ref: "#/definitions/BikerToken"
        404:
          description: "PIN informed not found"
  /api/authn/generatepin:
    post:
      tags:
      - "Authentication"
      summary: "Request a PIN to be generated for the given client, the PIN will be sent by email or SMS"
      description: ""
      operationId: "generatePIN"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Pin to be validated, email and mobile"
        required: true
        schema:
          $ref: "#/definitions/GeneratePINRequest"
      responses:
        200:
          description: "Informational message"
          schema:
            $ref: "#/definitions/GeneratePINResponse"
        404:
          description: "Biker with the email or mobile informed not found"
  /api/biker:
    post:
      tags:
      - "Biker"
      summary: "Create a new biker in the application"
      description: ""
      operationId: "createBiker"
      produces:
      - "application/json"
      parameters:
      - name: bikerideClientID
        in: header
        description: "ID of the client which have the token generated to"
        type: string
        format: uuid
        required: true
      - name: bikerideClientToken
        in: header
        description: "Authentication token generated for the current client"
        type: string
        format: uuid
        required: true
      - in: "body"
        name: "body"
        description: "Biker fields"
        required: true
        schema:
          $ref: "#/definitions/BikerCreateRequest"
      responses:
        200:
          description: "Biker ID and authentication token"
          schema:
            $ref: "#/definitions/BikerToken"
  /api/biker/byeemail:
    get:
      tags:
      - "Biker"
      summary: "Get the biker ID providing its email"
      description: ""
      operationId: "getBikerByEmail"
      produces:
      - "application/json"
      parameters:
      - name: bikerideClientID
        in: header
        description: "ID of the client which have the token generated to"
        type: string
        format: uuid
        required: true
      - name: bikerideClientToken
        in: header
        description: "Authentication token generated for the current client"
        type: string
        format: uuid
        required: true
      - in: "body"
        name: "body"
        description: "Biker email"
        required: true
        schema:
          $ref: "#/definitions/BikerByEmailRequest"
      responses:
        200:
          description: "Biker ID and fields"
          schema:
            $ref: "#/definitions/BikerByEmailResponse"
        404:
          description: "Biker with given email found"
          schema:
            type: string
  /api/biker/{bikerID}/name:
    put:
      tags:
      - "Biker"
      summary: "Change biker's name"
      description: ""
      operationId: "changeBikerName"
      produces:
      - "application/json"
      parameters:
      - name: bikerideClientID
        in: header
        description: "ID of the client which have the token generated to"
        type: string
        format: uuid
        required: true
      - name: bikerideClientToken
        in: header
        description: "Authentication token generated for the current client"
        type: string
        format: uuid
        required: true
      - name: "bikerID"
        in: "path"
        description: "ID of biker"
        required: true
        type: "string"
        format: "uuid"
      - name: "body"
        in: "body"
        description: "Biker change fields containing the name (other values will be ignored)"
        required: true
        schema:
          $ref: "#/definitions/BikerChangeFields"
      responses:
        200:
          description: "Biker ID"
          schema:
            $ref: "#/definitions/BikerID"
        403:
          description: "Only the biker can change his data"
          schema:
            type: string
        404:
          description: "Biker not found"
          schema:
            type: string
  /api/biker/{bikerID}/avatar64:
    put:
      tags:
      - "Biker"
      summary: "Change biker's avatar Base64 picture"
      description: ""
      operationId: "changeBikerAvatarB64"
      produces:
      - "application/json"
      parameters:
      - name: bikerideClientID
        in: header
        description: "ID of the client which have the token generated to"
        type: string
        format: uuid
        required: true
      - name: bikerideClientToken
        in: header
        description: "Authentication token generated for the current client"
        type: string
        format: uuid
        required: true
      - name: "bikerID"
        in: "path"
        description: "ID of biker"
        required: true
        type: "string"
        format: "uuid"
      - name: "body"
        in: "body"
        description: "Biker change fields containing the Base64 avatar image (other values will be ignored)"
        required: true
        schema:
          $ref: "#/definitions/BikerChangeFields"
      responses:
        200:
          description: "Biker ID"
          schema:
            $ref: "#/definitions/BikerID"
        403:
          description: "Only the biker can change his data"
          schema:
            type: string
        404:
          description: "Biker not found"
          schema:
            type: string
  /api/biker/{bikerID}/bloodtype:
    put:
      tags:
      - "Biker"
      summary: "Change biker's bloodtype"
      description: ""
      operationId: "changeBikerBloodType"
      produces:
      - "application/json"
      parameters:
      - name: bikerideClientID
        in: header
        description: "ID of the client which have the token generated to"
        type: string
        format: uuid
        required: true
      - name: bikerideClientToken
        in: header
        description: "Authentication token generated for the current client"
        type: string
        format: uuid
        required: true
      - name: "bikerID"
        in: "path"
        description: "ID of biker"
        required: true
        type: "string"
        format: "uuid"
      - name: "body"
        in: "body"
        description: "Biker change fields containing the blood type (other values will be ignored)"
        required: true
        schema:
          $ref: "#/definitions/BikerChangeFields"
      responses:
        200:
          description: "Biker ID"
          schema:
            $ref: "#/definitions/BikerID"
        403:
          description: "Only the biker can change his data"
          schema:
            type: string
        404:
          description: "Biker not found"
          schema:
            type: string
  /api/biker/{bikerID}/mobile:
    put:
      tags:
      - "Biker"
      summary: "Change biker's mobile"
      description: ""
      operationId: "changeBikerMobile"
      produces:
      - "application/json"
      parameters:
      - name: bikerideClientID
        in: header
        description: "ID of the client which have the token generated to"
        type: string
        format: uuid
        required: true
      - name: bikerideClientToken
        in: header
        description: "Authentication token generated for the current client"
        type: string
        format: uuid
        required: true
      - name: "bikerID"
        in: "path"
        description: "ID of biker"
        required: true
        type: "string"
        format: "uuid"
      - name: "body"
        in: "body"
        description: "Biker change fields containing the mobile (other values will be ignored)"
        required: true
        schema:
          $ref: "#/definitions/BikerChangeFields"
      responses:
        200:
          description: "Biker ID"
          schema:
            $ref: "#/definitions/BikerID"
        403:
          description: "Only the biker can change his data"
          schema:
            type: string
        404:
          description: "Biker not found"
          schema:
            type: string
  /api/biker/{bikerID}/email:
    put:
      tags:
      - "Biker"
      summary: "Change biker's email"
      description: ""
      operationId: "changeBikerEmail"
      produces:
      - "application/json"
      parameters:
      - name: bikerideClientID
        in: header
        description: "ID of the client which have the token generated to"
        type: string
        format: uuid
        required: true
      - name: bikerideClientToken
        in: header
        description: "Authentication token generated for the current client"
        type: string
        format: uuid
        required: true
      - name: "bikerID"
        in: "path"
        description: "ID of biker"
        required: true
        type: "string"
        format: "uuid"
      - name: "body"
        in: "body"
        description: "Biker change fields containing the email (other values will be ignored)"
        required: true
        schema:
          $ref: "#/definitions/BikerChangeFields"
      responses:
        200:
          description: "Biker ID"
          schema:
            $ref: "#/definitions/BikerID"
        403:
          description: "Only the biker can change his data"
          schema:
            type: string
        404:
          description: "Biker not found"
          schema:
            type: string
  /api/biker/{bikerID}/activate:
    post:
      tags:
      - "Biker"
      summary: "Activate biker"
      description: ""
      operationId: "activateBiker"
      produces:
      - "application/json"
      parameters:
      - name: bikerideClientID
        in: header
        description: "ID of the client which have the token generated to"
        type: string
        format: uuid
        required: true
      - name: bikerideClientToken
        in: header
        description: "Authentication token generated for the current client"
        type: string
        format: uuid
        required: true
      - name: "bikerID"
        in: "path"
        description: "ID of biker"
        required: true
        type: "string"
        format: "uuid"
      responses:
        200:
          description: "Biker ID"
          schema:
            $ref: "#/definitions/BikerID"
        403:
          description: "Only the biker can change his data"
          schema:
            type: string
        404:
          description: "Biker not found"
          schema:
            type: string
  /api/biker/{bikerID}/deactivate:
    post:
      tags:
      - "Biker"
      summary: "Deactivate biker"
      description: ""
      operationId: "deactivateBiker"
      produces:
      - "application/json"
      parameters:
      - name: bikerideClientID
        in: header
        description: "ID of the client which have the token generated to"
        type: string
        format: uuid
        required: true
      - name: bikerideClientToken
        in: header
        description: "Authentication token generated for the current client"
        type: string
        format: uuid
        required: true
      - name: "bikerID"
        in: "path"
        description: "ID of biker"
        required: true
        type: "string"
        format: "uuid"
      responses:
        200:
          description: "Biker ID"
          schema:
            $ref: "#/definitions/BikerID"
        403:
          description: "Only the biker can change his data"
          schema:
            type: string
        404:
          description: "Biker not found"
          schema:
            type: string
  /api/biker/{bikerID}/isactive:
    get:
      tags:
      - "Biker"
      summary: "Is biker active?"
      description: ""
      operationId: "getBikerIsActive"
      produces:
      - "application/json"
      parameters:
      - name: bikerideClientID
        in: header
        description: "ID of the client which have the token generated to"
        type: string
        format: uuid
        required: true
      - name: bikerideClientToken
        in: header
        description: "Authentication token generated for the current client"
        type: string
        format: uuid
        required: true
      - name: "bikerID"
        in: "path"
        description: "ID of biker"
        required: true
        type: "string"
        format: "uuid"
      responses:
        200:
          description: "Biker ID and active status"
          schema:
            $ref: "#/definitions/BikerIsActive"
        404:
          description: "Biker not found"
          schema:
            type: string
  /api/biker/{bikerID}/avatarb64:
    get:
      tags:
      - "Biker"
      summary: "Get biker avatar Base64 image"
      description: ""
      operationId: "getBikerAvatarB64"
      produces:
      - "application/json"
      parameters:
      - name: bikerideClientID
        in: header
        description: "ID of the client which have the token generated to"
        type: string
        format: uuid
        required: true
      - name: bikerideClientToken
        in: header
        description: "Authentication token generated for the current client"
        type: string
        format: uuid
        required: true
      - name: "bikerID"
        in: "path"
        description: "ID of biker"
        required: true
        type: "string"
        format: "uuid"
      responses:
        200:
          description: "Biker ID and avatar Base64 image"
          schema:
            $ref: "#/definitions/BikerAvatarB64"
        404:
          description: "Biker not found"
          schema:
            type: string
  /api/biker/{bikerID}:
    get:
      tags:
      - "Biker"
      summary: "Get biker"
      description: ""
      operationId: "getBiker"
      produces:
      - "application/json"
      parameters:
      - name: bikerideClientID
        in: header
        description: "ID of the client which have the token generated to"
        type: string
        format: uuid
        required: true
      - name: bikerideClientToken
        in: header
        description: "Authentication token generated for the current client"
        type: string
        format: uuid
        required: true
      - name: "bikerID"
        in: "path"
        description: "ID of biker"
        required: true
        type: "string"
        format: "uuid"
      responses:
        200:
          description: "Biker record"
          schema:
            $ref: "#/definitions/Biker"
        404:
          description: "Biker not found"
          schema:
            type: string
  /api/bikers:
    get:
      tags:
      - "Biker"
      summary: "Get biker"
      description: ""
      operationId: "getBikers"
      produces:
      - "application/json"
      parameters:
      - name: bikerideClientID
        in: header
        description: "ID of the client which have the token generated to"
        type: string
        format: uuid
        required: true
      - name: bikerideClientToken
        in: header
        description: "Authentication token generated for the current client"
        type: string
        format: uuid
        required: true
      - name: pageNo
        in: query
        description: "Page number to be retrieved"
        type: integer
      - name: pageSize
        in: query
        description: "Size of the page to be retrieved"
        type: integer
      responses:
        200:
          description: "Biker record"
          schema:
            type: array
            items:
              $ref: "#/definitions/Biker"
  /api/track:
    post:
      tags:
      - "Track"
      summary: "Create a new track in the application"
      description: ""
      operationId: "createTrack"
      produces:
      - "application/json"
      parameters:
      - name: bikerideClientID
        in: header
        description: "ID of the client which have the token generated to"
        type: string
        format: uuid
        required: true
      - name: bikerideClientToken
        in: header
        description: "Authentication token generated for the current client"
        type: string
        format: uuid
        required: true
      - in: "body"
        name: "body"
        description: "Track fields"
        required: true
        schema:
          $ref: "#/definitions/TrackFields"
      responses:
        200:
          description: "Track ID"
          schema:
            $ref: "#/definitions/TrackID"
        400:
          description: "Invalid maintainer biker ID"
          schema:
            type: string
  /api/track/{trackID}/name:
    put:
      tags:
      - "Track"
      summary: "Change a track name"
      description: ""
      operationId: "changeTrackName"
      produces:
      - "application/json"
      parameters:
      - name: bikerideClientID
        in: header
        description: "ID of the client which have the token generated to"
        type: string
        format: uuid
        required: true
      - name: bikerideClientToken
        in: header
        description: "Authentication token generated for the current client"
        type: string
        format: uuid
        required: true
      - name: "trackID"
        in: "path"
        description: "ID of track"
        required: true
        type: "string"
        format: "uuid"
      - in: "body"
        name: "body"
        description: "Track change fields containing the name (other values will be ignored)"
        required: true
        schema:
          $ref: "#/definitions/TrackChangeFields"
      responses:
        200:
          description: "Track ID"
          schema:
            $ref: "#/definitions/TrackID"
        403:
          description: "Only the maintainer can change track data"
          schema:
            type: string
        404:
          description: "Track not found"
          schema:
            type: string
  /api/track/{trackID}/maintainer:
    put:
      tags:
      - "Track"
      summary: "Change a track maintainer"
      description: ""
      operationId: "changeTrackMaintainer"
      produces:
      - "application/json"
      parameters:
      - name: bikerideClientID
        in: header
        description: "ID of the client which have the token generated to"
        type: string
        format: uuid
        required: true
      - name: bikerideClientToken
        in: header
        description: "Authentication token generated for the current client"
        type: string
        format: uuid
        required: true
      - name: "trackID"
        in: "path"
        description: "ID of track"
        required: true
        type: "string"
        format: "uuid"
      - in: "body"
        name: "body"
        description: "Track change fields containing the maintainer (other values will be ignored)"
        required: true
        schema:
          $ref: "#/definitions/TrackChangeFields"
      responses:
        200:
          description: "Track ID"
          schema:
            $ref: "#/definitions/TrackID"
        400:
          description: "Invalid maintainer biker ID"
          schema:
            type: string
        403:
          description: "Only the maintainer can change track data"
          schema:
            type: string
        404:
          description: "Track not found"
          schema:
            type: string
  /api/track/{trackID}/activate:
    post:
      tags:
      - "Track"
      summary: "Activate a track"
      description: ""
      operationId: "activateTrack"
      produces:
      - "application/json"
      parameters:
      - name: bikerideClientID
        in: header
        description: "ID of the client which have the token generated to"
        type: string
        format: uuid
        required: true
      - name: bikerideClientToken
        in: header
        description: "Authentication token generated for the current client"
        type: string
        format: uuid
        required: true
      - name: "trackID"
        in: "path"
        description: "ID of track"
        required: true
        type: "string"
        format: "uuid"
      responses:
        200:
          description: "Track ID"
          schema:
            $ref: "#/definitions/TrackID"
        403:
          description: "Only the maintainer can change track data"
          schema:
            type: string
        404:
          description: "Track not found"
          schema:
            type: string
  /api/track/{trackID}/deactivate:
    post:
      tags:
      - "Track"
      summary: "Deactivate a track"
      description: ""
      operationId: "deactivateTrack"
      produces:
      - "application/json"
      parameters:
      - name: bikerideClientID
        in: header
        description: "ID of the client which have the token generated to"
        type: string
        format: uuid
        required: true
      - name: bikerideClientToken
        in: header
        description: "Authentication token generated for the current client"
        type: string
        format: uuid
        required: true
      - name: "trackID"
        in: "path"
        description: "ID of track"
        required: true
        type: "string"
        format: "uuid"
      responses:
        200:
          description: "Track ID"
          schema:
            $ref: "#/definitions/TrackID"
        403:
          description: "Only the maintainer can change track data"
          schema:
            type: string
        404:
          description: "Track not found"
          schema:
            type: string
  /api/track/{trackID}/isactivate:
    get:
      tags:
      - "Track"
      summary: "Check if a given track is active"
      description: ""
      operationId: "getTrackIsActive"
      produces:
      - "application/json"
      parameters:
      - name: bikerideClientID
        in: header
        description: "ID of the client which have the token generated to"
        type: string
        format: uuid
        required: true
      - name: bikerideClientToken
        in: header
        description: "Authentication token generated for the current client"
        type: string
        format: uuid
        required: true
      - name: "trackID"
        in: "path"
        description: "ID of track"
        required: true
        type: "string"
        format: "uuid"
      responses:
        200:
          description: "Track ID and active boolean value"
          schema:
            $ref: "#/definitions/TrackIsActive"
        404:
          description: "Track not found"
          schema:
            type: string
  /api/track/{trackID}/waypoint:
    post:
      tags:
      - "Track"
      summary: "Add one waypoint to the track"
      description: ""
      operationId: "addTrackWayPoint"
      produces:
      - "application/json"
      parameters:
      - name: bikerideClientID
        in: header
        description: "ID of the client which have the token generated to"
        type: string
        format: uuid
        required: true
      - name: bikerideClientToken
        in: header
        description: "Authentication token generated for the current client"
        type: string
        format: uuid
        required: true
      - name: "trackID"
        in: "path"
        description: "ID of track"
        required: true
        type: "string"
        format: "uuid"
      - in: "body"
        name: "body"
        description: "Track waypoint fields"
        required: true
        schema:
          $ref: "#/definitions/TrackWaypointFields"
      responses:
        200:
          description: "Track waypoint ID"
          schema:
            $ref: "#/definitions/TrackWaypointID"
        403:
          description: "Only the maintainer can change track data"
          schema:
            type: string
        404:
          description: "Track not found"
          schema:
            type: string
  /api/track/{trackID}/{waypointid}:
    delete:
      tags:
      - "Track"
      summary: "Delete one waypoint from the track"
      description: ""
      operationId: "deleteTrackWayPoint"
      produces:
      - "application/json"
      parameters:
      - name: bikerideClientID
        in: header
        description: "ID of the client which have the token generated to"
        type: string
        format: uuid
        required: true
      - name: bikerideClientToken
        in: header
        description: "Authentication token generated for the current client"
        type: string
        format: uuid
        required: true
      - name: "trackID"
        in: "path"
        description: "ID of track"
        required: true
        type: "string"
        format: "uuid"
      - name: "waypointid"
        in: "path"
        description: "ID of waypoint"
        required: true
        type: "string"
        format: "uuid"
      responses:
        200:
          description: "Track ID"
          schema:
            $ref: "#/definitions/TrackID"
        400:
          description: "Invalid waypoint ID"
          schema:
            type: string
        403:
          description: "Only the maintainer can change track data"
          schema:
            type: string
        404:
          description: "Track not found"
          schema:
            type: string
  /api/track/{trackID}/{waypointid}/initial:
    post:
      tags:
      - "Track"
      summary: "Set one waypoint as the initial of the track"
      description: ""
      operationId: "defineTrackInitialWayPoint"
      produces:
      - "application/json"
      parameters:
      - name: bikerideClientID
        in: header
        description: "ID of the client which have the token generated to"
        type: string
        format: uuid
        required: true
      - name: bikerideClientToken
        in: header
        description: "Authentication token generated for the current client"
        type: string
        format: uuid
        required: true
      - name: "trackID"
        in: "path"
        description: "ID of track"
        required: true
        type: "string"
        format: "uuid"
      - name: "waypointid"
        in: "path"
        description: "ID of waypoint"
        required: true
        type: "string"
        format: "uuid"
      responses:
        200:
          description: "Track ID"
          schema:
            $ref: "#/definitions/TrackID"
        400:
          description: "Invalid waypoint ID"
          schema:
            type: string
        403:
          description: "Only the maintainer can change track data"
          schema:
            type: string
        404:
          description: "Track not found"
          schema:
            type: string
  /api/track/{trackID}/waypoints:
    get:
      tags:
      - "Track"
      summary: "Get the waypoints of the track in order"
      description: ""
      operationId: "getTrackWayPoints"
      produces:
      - "application/json"
      parameters:
      - name: bikerideClientID
        in: header
        description: "ID of the client which have the token generated to"
        type: string
        format: uuid
        required: true
      - name: bikerideClientToken
        in: header
        description: "Authentication token generated for the current client"
        type: string
        format: uuid
        required: true
      - name: "trackID"
        in: "path"
        description: "ID of track"
        required: true
        type: "string"
        format: "uuid"
      responses:
        200:
          description: "Track waypoint ID"
          schema:
            type: array
            items:
              $ref: '#/definitions/TrackWaypoint'
        404:
          description: "Track not found"
          schema:
            type: string
  /api/track/{trackID}:
    get:
      tags:
      - "Track"
      summary: "Get one track"
      description: ""
      operationId: "getTrack"
      produces:
      - "application/json"
      parameters:
      - name: bikerideClientID
        in: header
        description: "ID of the client which have the token generated to"
        type: string
        format: uuid
        required: true
      - name: bikerideClientToken
        in: header
        description: "Authentication token generated for the current client"
        type: string
        format: uuid
        required: true
      - name: "trackID"
        in: "path"
        description: "ID of track"
        required: true
        type: "string"
        format: "uuid"
      responses:
        200:
          description: "Track waypoint ID"
          schema:
            $ref: '#/definitions/Track'
        404:
          description: "Track not found"
          schema:
            type: string
  /api/tracks:
    get:
      tags:
      - "Track"
      summary: "Get a page of tracks"
      description: ""
      operationId: "getTracks"
      produces:
      - "application/json"
      parameters:
      - name: bikerideClientID
        in: header
        description: "ID of the client which have the token generated to"
        type: string
        format: uuid
        required: true
      - name: bikerideClientToken
        in: header
        description: "Authentication token generated for the current client"
        type: string
        format: uuid
        required: true
      - name: pageNo
        in: query
        description: "Page number to be retrieved"
        type: integer
      - name: pageSize
        in: query
        description: "Size of the page to be retrieved"
        type: integer
      responses:
        200:
          description: "Track waypoint ID"
          schema:
            type: array
            items:
              $ref: '#/definitions/Track'
  /api/track/{trackID}/readwaypoints:
    get:
      tags:
      - "Track"
      summary: "Get the waypoints of the track from the readside in order"
      description: ""
      operationId: "readTrackWayPoints"
      produces:
      - "application/json"
      parameters:
      - name: bikerideClientID
        in: header
        description: "ID of the client which have the token generated to"
        type: string
        format: uuid
        required: true
      - name: bikerideClientToken
        in: header
        description: "Authentication token generated for the current client"
        type: string
        format: uuid
        required: true
      - name: "trackID"
        in: "path"
        description: "ID of track"
        required: true
        type: "string"
        format: "uuid"
      responses:
        200:
          description: "Array os track waypoint"
          schema:
            type: array
            items:
              $ref: '#/definitions/TrackWaypoint'
        404:
          description: "Track not found"
          schema:
            type: string
  /api/ride:
    post:
      tags:
      - "Ride"
      summary: "Create a new ride in the application"
      description: ""
      operationId: "createRide"
      produces:
      - "application/json"
      parameters:
      - name: bikerideClientID
        in: header
        description: "ID of the client which have the token generated to"
        type: string
        format: uuid
        required: true
      - name: bikerideClientToken
        in: header
        description: "Authentication token generated for the current client"
        type: string
        format: uuid
        required: true
      - in: "body"
        name: "body"
        description: "Ride fields"
        required: true
        schema:
          $ref: "#/definitions/RideCreateFields"
      responses:
        200:
          description: "Ride ID"
          schema:
            $ref: "#/definitions/RideID"
        400:
          description: "Invalid track ID"
          schema:
            type: string
  /api/ride/{rideID}/name:
    put:
      tags:
      - "Ride"
      summary: "Change a ride name"
      description: ""
      operationId: "changeRideName"
      produces:
      - "application/json"
      parameters:
      - name: bikerideClientID
        in: header
        description: "ID of the client which have the token generated to"
        type: string
        format: uuid
        required: true
      - name: bikerideClientToken
        in: header
        description: "Authentication token generated for the current client"
        type: string
        format: uuid
        required: true
      - name: "rideID"
        in: "path"
        description: "ID of ride"
        required: true
        type: "string"
        format: "uuid"
      - in: "body"
        name: "body"
        description: "Track change fields containing the name (other values will be ignored)"
        required: true
        schema:
          $ref: "#/definitions/TrackChangeFields"
      responses:
        200:
          description: "Ride ID"
          schema:
            $ref: "#/definitions/RideID"
        403:
          description: "Only the organizer can change ride data"
          schema:
            type: string
        404:
          description: "Ride not found"
          schema:
            type: string
  /api/ride/{rideID}/organizer:
    put:
      tags:
      - "Ride"
      summary: "Change a ride organizer"
      description: ""
      operationId: "changeRideOrganizer"
      produces:
      - "application/json"
      parameters:
      - name: bikerideClientID
        in: header
        description: "ID of the client which have the token generated to"
        type: string
        format: uuid
        required: true
      - name: bikerideClientToken
        in: header
        description: "Authentication token generated for the current client"
        type: string
        format: uuid
        required: true
      - name: "rideID"
        in: "path"
        description: "ID of ride"
        required: true
        type: "string"
        format: "uuid"
      - in: "body"
        name: "body"
        description: "Track change fields containing the organizer (other values will be ignored)"
        required: true
        schema:
          $ref: "#/definitions/TrackChangeFields"
      responses:
        200:
          description: "Ride ID"
          schema:
            $ref: "#/definitions/RideID"
        400:
          description: "Invalid orginizer biker ID"
          schema:
            type: string
        403:
          description: "Only the organizer can change ride data"
          schema:
            type: string
        404:
          description: "Ride not found"
          schema:
            type: string
  /api/ride/{rideID}/track:
    put:
      tags:
      - "Ride"
      summary: "Change a ride track"
      description: ""
      operationId: "changeRideTrack"
      produces:
      - "application/json"
      parameters:
      - name: bikerideClientID
        in: header
        description: "ID of the client which have the token generated to"
        type: string
        format: uuid
        required: true
      - name: bikerideClientToken
        in: header
        description: "Authentication token generated for the current client"
        type: string
        format: uuid
        required: true
      - name: "rideID"
        in: "path"
        description: "ID of ride"
        required: true
        type: "string"
        format: "uuid"
      - in: "body"
        name: "body"
        description: "Track change fields containing the track (other values will be ignored)"
        required: true
        schema:
          $ref: "#/definitions/TrackChangeFields"
      responses:
        200:
          description: "Ride ID"
          schema:
            $ref: "#/definitions/RideID"
        403:
          description: "Only the organizer can change ride data"
          schema:
            type: string
        404:
          description: "Ride not found"
          schema:
            type: string
  /api/ride/{rideID}/limit:
    put:
      tags:
      - "Ride"
      summary: "Change a ride limit of riders"
      description: ""
      operationId: "changeRideLimit"
      produces:
      - "application/json"
      parameters:
      - name: bikerideClientID
        in: header
        description: "ID of the client which have the token generated to"
        type: string
        format: uuid
        required: true
      - name: bikerideClientToken
        in: header
        description: "Authentication token generated for the current client"
        type: string
        format: uuid
        required: true
      - name: "rideID"
        in: "path"
        description: "ID of ride"
        required: true
        type: "string"
        format: "uuid"
      - in: "body"
        name: "body"
        description: "Track change fields containing the bikers limit (other values will be ignored)"
        required: true
        schema:
          $ref: "#/definitions/TrackChangeFields"
      responses:
        200:
          description: "Ride ID"
          schema:
            $ref: "#/definitions/RideID"
        403:
          description: "Only the organizer can change ride data"
          schema:
            type: string
        404:
          description: "Ride not found"
          schema:
            type: string
  /api/ride/{rideID}/addleader:
    put:
      tags:
      - "Ride"
      summary: "Add a new leader to the ride"
      description: ""
      operationId: "addRideLeader"
      produces:
      - "application/json"
      parameters:
      - name: bikerideClientID
        in: header
        description: "ID of the client which have the token generated to"
        type: string
        format: uuid
        required: true
      - name: bikerideClientToken
        in: header
        description: "Authentication token generated for the current client"
        type: string
        format: uuid
        required: true
      - name: "rideID"
        in: "path"
        description: "ID of ride"
        required: true
        type: "string"
        format: "uuid"
      - in: "body"
        name: "body"
        description: "Id of the biker to be added as leader"
        required: true
        schema:
          $ref: "#/definitions/BikerID"
      responses:
        200:
          description: "Ride ID"
          schema:
            $ref: "#/definitions/RideID"
        400:
          description: "Invalid leader biker ID"
          schema:
            type: string
        403:
          description: "One biker can only add himself as leader"
          schema:
            type: string
        404:
          description: "Ride or biker not found"
          schema:
            type: string
  /api/ride/{rideID}/removeleader:
    put:
      tags:
      - "Ride"
      summary: "Remove a leader to the ride"
      description: ""
      operationId: "removeRideLeader"
      produces:
      - "application/json"
      parameters:
      - name: bikerideClientID
        in: header
        description: "ID of the client which have the token generated to"
        type: string
        format: uuid
        required: true
      - name: bikerideClientToken
        in: header
        description: "Authentication token generated for the current client"
        type: string
        format: uuid
        required: true
      - name: "rideID"
        in: "path"
        description: "ID of ride"
        required: true
        type: "string"
        format: "uuid"
      - in: "body"
        name: "body"
        description: "Id of the biker to be removed from leaders"
        required: true
        schema:
          $ref: "#/definitions/BikerID"
      responses:
        200:
          description: "Ride ID"
          schema:
            $ref: "#/definitions/RideID"
        403:
          description: "One biker can only remove himself from leaders"
          schema:
            type: string
        404:
          description: "Ride or leader not found"
          schema:
            type: string
  /api/ride/{rideID}/opensubscriptions:
    post:
      tags:
      - "Ride"
      summary: "Open subscriptions to the ride"
      description: ""
      operationId: "opensubscriptionsRide"
      produces:
      - "application/json"
      parameters:
      - name: bikerideClientID
        in: header
        description: "ID of the client which have the token generated to"
        type: string
        format: uuid
        required: true
      - name: bikerideClientToken
        in: header
        description: "Authentication token generated for the current client"
        type: string
        format: uuid
        required: true
      - name: "rideID"
        in: "path"
        description: "ID of ride"
        required: true
        type: "string"
        format: "uuid"
      responses:
        200:
          description: "Ride ID"
          schema:
            $ref: "#/definitions/RideID"
        403:
          description: "Only the organizer can change ride data"
          schema:
            type: string
        404:
          description: "Ride not found"
          schema:
            type: string
  /api/ride/{rideID}/closesubscriptions:
    post:
      tags:
      - "Ride"
      summary: "Close subscriptions to the ride"
      description: ""
      operationId: "closesubscriptionsRide"
      produces:
      - "application/json"
      parameters:
      - name: bikerideClientID
        in: header
        description: "ID of the client which have the token generated to"
        type: string
        format: uuid
        required: true
      - name: bikerideClientToken
        in: header
        description: "Authentication token generated for the current client"
        type: string
        format: uuid
        required: true
      - name: "rideID"
        in: "path"
        description: "ID of ride"
        required: true
        type: "string"
        format: "uuid"
      responses:
        200:
          description: "Ride ID"
          schema:
            $ref: "#/definitions/RideID"
        403:
          description: "Only the organizer can change ride data"
          schema:
            type: string
        404:
          description: "Ride not found"
          schema:
            type: string
  /api/ride/{rideID}/subscribe:
    post:
      tags:
      - "Ride"
      summary: "Subscribe to one ride"
      description: ""
      operationId: "subscribetoRide"
      produces:
      - "application/json"
      parameters:
      - name: bikerideClientID
        in: header
        description: "ID of the client which have the token generated to"
        type: string
        format: uuid
        required: true
      - name: bikerideClientToken
        in: header
        description: "Authentication token generated for the current client"
        type: string
        format: uuid
        required: true
      - name: "rideID"
        in: "path"
        description: "ID of ride"
        required: true
        type: "string"
        format: "uuid"
      - in: "body"
        name: "body"
        description: "Id of the biker to be added as rider"
        required: true
        schema:
          $ref: "#/definitions/BikerID"
      responses:
        200:
          description: "Ride ID"
          schema:
            $ref: "#/definitions/RideID"
        403:
          description: "Only a biker can subscribe himself as rider"
          schema:
            type: string
        404:
          description: "Ride not found"
          schema:
            type: string
  /api/ride/{rideID}/unsubscribe:
    post:
      tags:
      - "Ride"
      summary: "Unsubscribe to one ride"
      description: ""
      operationId: "unsubscribetoRide"
      produces:
      - "application/json"
      parameters:
      - name: bikerideClientID
        in: header
        description: "ID of the client which have the token generated to"
        type: string
        format: uuid
        required: true
      - name: bikerideClientToken
        in: header
        description: "Authentication token generated for the current client"
        type: string
        format: uuid
        required: true
      - name: "rideID"
        in: "path"
        description: "ID of ride"
        required: true
        type: "string"
        format: "uuid"
      - in: "body"
        name: "body"
        description: "Id of the biker to be removed as rider"
        required: true
        schema:
          $ref: "#/definitions/BikerID"
      responses:
        200:
          description: "Ride ID"
          schema:
            $ref: "#/definitions/RideID"
        403:
          description: "Only a biker can unsubscribe himself from ride"
          schema:
            type: string
        404:
          description: "Ride not found"
          schema:
            type: string
  /api/ride/{rideID}/start:
    post:
      tags:
      - "Ride"
      summary: "Start a ride"
      description: ""
      operationId: "startRide"
      produces:
      - "application/json"
      parameters:
      - name: bikerideClientID
        in: header
        description: "ID of the client which have the token generated to"
        type: string
        format: uuid
        required: true
      - name: bikerideClientToken
        in: header
        description: "Authentication token generated for the current client"
        type: string
        format: uuid
        required: true
      - name: "rideID"
        in: "path"
        description: "ID of ride"
        required: true
        type: "string"
        format: "uuid"
      responses:
        200:
          description: "Ride ID"
          schema:
            $ref: "#/definitions/RideID"
        403:
          description: "Only a leader can start the ride"
          schema:
            type: string
        404:
          description: "Ride not found"
          schema:
            type: string
  /api/ride/{rideID}/suspend:
    post:
      tags:
      - "Ride"
      summary: "Suspend a ride"
      description: ""
      operationId: "suspendRide"
      produces:
      - "application/json"
      parameters:
      - name: bikerideClientID
        in: header
        description: "ID of the client which have the token generated to"
        type: string
        format: uuid
        required: true
      - name: bikerideClientToken
        in: header
        description: "Authentication token generated for the current client"
        type: string
        format: uuid
        required: true
      - name: "rideID"
        in: "path"
        description: "ID of ride"
        required: true
        type: "string"
        format: "uuid"
      responses:
        200:
          description: "Ride ID"
          schema:
            $ref: "#/definitions/RideID"
        403:
          description: "Only one leader can suspend the ride"
          schema:
            type: string
        404:
          description: "Ride not found"
          schema:
            type: string
  /api/ride/{rideID}/resume:
    post:
      tags:
      - "Ride"
      summary: "Resume a ride"
      description: ""
      operationId: "resumeRide"
      produces:
      - "application/json"
      parameters:
      - name: bikerideClientID
        in: header
        description: "ID of the client which have the token generated to"
        type: string
        format: uuid
        required: true
      - name: bikerideClientToken
        in: header
        description: "Authentication token generated for the current client"
        type: string
        format: uuid
        required: true
      - name: "rideID"
        in: "path"
        description: "ID of ride"
        required: true
        type: "string"
        format: "uuid"
      responses:
        200:
          description: "Ride ID"
          schema:
            $ref: "#/definitions/RideID"
        403:
          description: "Only a leader can resume the ride"
          schema:
            type: string
        404:
          description: "Ride not found"
          schema:
            type: string
  /api/ride/{rideID}/finish:
    post:
      tags:
      - "Ride"
      summary: "Finish a ride"
      description: ""
      operationId: "finishRide"
      produces:
      - "application/json"
      parameters:
      - name: bikerideClientID
        in: header
        description: "ID of the client which have the token generated to"
        type: string
        format: uuid
        required: true
      - name: bikerideClientToken
        in: header
        description: "Authentication token generated for the current client"
        type: string
        format: uuid
        required: true
      - name: "rideID"
        in: "path"
        description: "ID of ride"
        required: true
        type: "string"
        format: "uuid"
      responses:
        200:
          description: "Ride ID"
          schema:
            $ref: "#/definitions/RideID"
        403:
          description: "Only a leader can finish a ride"
          schema:
            type: string
        404:
          description: "Ride not found"
          schema:
            type: string
  /api/ride/{rideID}/isOpen:
    post:
      tags:
      - "Ride"
      summary: "Ride subscriptions are open?"
      description: ""
      operationId: "getRideIsOpen"
      produces:
      - "application/json"
      parameters:
      - name: bikerideClientID
        in: header
        description: "ID of the client which have the token generated to"
        type: string
        format: uuid
        required: true
      - name: bikerideClientToken
        in: header
        description: "Authentication token generated for the current client"
        type: string
        format: uuid
        required: true
      - name: "rideID"
        in: "path"
        description: "ID of ride"
        required: true
        type: "string"
        format: "uuid"
      responses:
        200:
          description: "Ride is open response"
          schema:
            $ref: "#/definitions/RideIsOpen"
        404:
          description: "Ride not found"
          schema:
            type: string
  /api/ride/{rideID}/isStarted:
    post:
      tags:
      - "Ride"
      summary: "Ride ia started?"
      description: ""
      operationId: "getRideIsStarted"
      produces:
      - "application/json"
      parameters:
      - name: bikerideClientID
        in: header
        description: "ID of the client which have the token generated to"
        type: string
        format: uuid
        required: true
      - name: bikerideClientToken
        in: header
        description: "Authentication token generated for the current client"
        type: string
        format: uuid
        required: true
      - name: "rideID"
        in: "path"
        description: "ID of ride"
        required: true
        type: "string"
        format: "uuid"
      responses:
        200:
          description: "Ride is started response"
          schema:
            $ref: "#/definitions/RideIsStarted"
        404:
          description: "Ride not found"
          schema:
            type: string
  /api/ride/{rideID}/isSuspended:
    post:
      tags:
      - "Ride"
      summary: "Ride ia suspended?"
      description: ""
      operationId: "getRideIsSuspended"
      produces:
      - "application/json"
      parameters:
      - name: bikerideClientID
        in: header
        description: "ID of the client which have the token generated to"
        type: string
        format: uuid
        required: true
      - name: bikerideClientToken
        in: header
        description: "Authentication token generated for the current client"
        type: string
        format: uuid
        required: true
      - name: "rideID"
        in: "path"
        description: "ID of ride"
        required: true
        type: "string"
        format: "uuid"
      responses:
        200:
          description: "Ride is suspended response"
          schema:
            $ref: "#/definitions/RideIsSuspended"
        404:
          description: "Ride not found"
          schema:
            type: string
  /api/ride/{rideID}/isFinished:
    post:
      tags:
      - "Ride"
      summary: "Ride ia finished?"
      description: ""
      operationId: "getRideIsFinished"
      produces:
      - "application/json"
      parameters:
      - name: bikerideClientID
        in: header
        description: "ID of the client which have the token generated to"
        type: string
        format: uuid
        required: true
      - name: bikerideClientToken
        in: header
        description: "Authentication token generated for the current client"
        type: string
        format: uuid
        required: true
      - name: "rideID"
        in: "path"
        description: "ID of ride"
        required: true
        type: "string"
        format: "uuid"
      responses:
        200:
          description: "Ride is finished response"
          schema:
            $ref: "#/definitions/RideIsFinished"
        404:
          description: "Ride not found"
          schema:
            type: string
  /api/ride/{rideID}:
    get:
      tags:
      - "Ride"
      summary: "Get one ride"
      description: ""
      operationId: "getRide"
      produces:
      - "application/json"
      parameters:
      - name: bikerideClientID
        in: header
        description: "ID of the client which have the token generated to"
        type: string
        format: uuid
        required: true
      - name: bikerideClientToken
        in: header
        description: "Authentication token generated for the current client"
        type: string
        format: uuid
        required: true
      - name: "rideID"
        in: "path"
        description: "ID of ride"
        required: true
        type: "string"
        format: "uuid"
      responses:
        200:
          description: "The corresponding ride"
          schema:
            $ref: '#/definitions/Ride'
        404:
          description: "Ride not found"
          schema:
            type: string
definitions:
  Token:
    type: object
    properties:
      authToken:
        type: string
      refreshToken:
        type: string
  ValidatePINRequest:
    type: object
    properties:
      client:
        $ref: '#/definitions/BikerClient'
      pin:
        type: string
  GeneratePINRequest:
    type: object
    properties:
      client:
        $ref: '#/definitions/BikerClient'
      email:
        type: string
      mobile:
        type: string
  GeneratePINResponse:
    type: object
    properties:
      message:
        type: string
  BikerToken:
    type: object
    properties:
      bikerID:
        $ref: '#/definitions/BikerID'
      token:
        $ref: '#/definitions/Token'
  BikerClient:
    type: object
    properties:
      clientID:
        type: string
        format: uuid
  BikerCreateRequest:
    type: object
    properties:
      client:
        $ref: '#/definitions/BikerClient'
      bikerFields:
        $ref: '#/definitions/BikerFields'
  BikerID:
    type: object
    properties:
      bikerID:
        type: string
        format: uuid
  BikerFields:
    type: object
    properties:
      name:
        type: string
      avatarb64:
        type: string
      bloodType:
        type: string
      mobile:
        type: string
      email:
        type: string
      active:
        type: boolean
  BikerChangeFields:
    type: object
    properties:
      name:
        type: string
      avatarb64:
        type: string
      bloodType:
        type: string
      mobile:
        type: string
      email:
        type: string
  Biker:
    type: object
    properties:
      bikerID:
        $ref: '#/definitions/BikerID'
      bikerFields:
        $ref: '#/definitions/BikerFields'
  BikerAvatarB64:
    type: object
    properties:
      bikerID:
        type: string
        format: uuid
      avatarb64:
        type: string
  BikerIsActive:
    type: object
    properties:
      bikerID:
        type: string
        format: uuid
      active:
        type: boolean
  BikerByEmailRequest:
    type: object
    properties:
      email:
        type: string
  BikerByEmailResponse:
    type: object
    properties:
      bikerID:
        $ref: '#/definitions/BikerID'
      bikerFields:
        $ref: '#/definitions/BikerFields'
  TrackID:
    type: object
    properties:
      trackID:
        type: string
        format: uuid
  TrackFields:
    type: object
    properties:
      name:
        type: string
      maintainer:
        type: string
        format: uuid
      active:
        type: boolean
  TrackChangeFields:
    type: object
    properties:
      name:
        type: string
      maintainer:
        type: string
        format: uuid
  TrackWaypointFields:
    type: object
    properties:
      name:
        type: string
      coordinates:
        type: string
  TrackWaypointID:
    type: object
    properties:
      trackid:
        type: string
        format: uuid
      trackwaypointid:
        type: string
        format: uuid
  TrackWaypoint:
    type: object
    properties:
      trackwaypointid:
        $ref: '#/definitions/TrackWaypointID'
      trackWaypointFields:
        $ref: '#/definitions/TrackWaypointFields'
  TrackIsActive:
    type: object
    properties:
      id:
        type: string
        format: uuid
      active:
        type: boolean
  Track:
    type: object
    properties:
      trackID:
        $ref: '#/definitions/TrackID'
      trackFields:
        $ref: '#/definitions/TrackFields'
      trackWaypoints:
        type: array
        items:
          $ref: '#/definitions/TrackWaypoint'
  RideID:
    type: object
    properties:
      rideID:
        type: string
        format: uuid
  RideCreateFields:
    type: object
    properties:
      name:
        type: string
      limit:
        type: integer
      track:
        $ref: '#/definitions/TrackID'
      opentime:
        type: string
        format: date-time
      closetime:
        type: string
        format: date-time
      starttime:
        type: string
        format: date-time
      finishtime:
        type: string
        format: date-time
  RideFields:
    type: object
    properties:
      name:
        type: string
      organizer:
        $ref: '#/definitions/BikerID'
      limit:
        type: integer
      track:
        $ref: '#/definitions/TrackID'
      open:
        type: boolean
      started:
        type: boolean
      suspended:
        type: boolean
      finished:
        type: boolean
      opentime:
        type: string
        format: date-time
      closetime:
        type: string
        format: date-time
      starttime:
        type: string
        format: date-time
      finishtime:
        type: string
        format: date-time
  RideChangeFields:
    type: object
    properties:
      name:
        type: string
      organizer:
        $ref: '#/definitions/BikerID'
      limit:
        type: integer
      opentime:
        type: string
        format: date-time
      closetime:
        type: string
        format: date-time
      starttime:
        type: string
        format: date-time
      finishtime:
        type: string
        format: date-time
      track:
        $ref: '#/definitions/TrackID'
  Ride:
    type: object
    properties:
      rideID:
        $ref: '#/definitions/RideID'
      rideFields:
        $ref: '#/definitions/RideFields'
      leaders:
        type: array
        items:
          $ref: '#/definitions/BikerID'
      riders:
        type: array
        items:
          $ref: '#/definitions/BikerID'
  RideIsOpen:
    type: object
    properties:
      rideID:
        type: string
        format: uuid
      open:
        type: boolean
  RideIsClose:
    type: object
    properties:
      rideID:
        type: string
        format: uuid
      closed:
        type: boolean
  RideIsStarted:
    type: object
    properties:
      rideID:
        type: string
        format: uuid
      started:
        type: boolean
  RideIsSuspended:
    type: object
    properties:
      rideID:
        type: string
        format: uuid
      suspended:
        type: boolean
  RideIsFinished:
    type: object
    properties:
      rideID:
        type: string
        format: uuid
      finished:
        type: boolean
externalDocs:
  description: Find out more about BikeRide Lagom
  url: 'https://github.com/fernandohackbart/bikeride-lagom'
